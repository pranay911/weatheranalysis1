import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.externals import joblib
from sklearn import tree

weatherdata = pd.read_csv('myweather.csv')

X = weatherdata.drop(columns=['rain','summer'])
Y = weatherdata['rain']
# X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)



model = DecisionTreeClassifier()
model.fit(X,Y)

tree.export_graphviz(model, out_file='summer-recommender.dot',
                    feature_names=['humidity','tempreature','pressure','rain','winter'],
                    class_names=sorted(str(Y.unique())),
                    label='all',
                    rounded=True,
                    filled=True)
                     

# joblib.load('weather1.joblib')


# predictions = model.predict(X_test)

# score = accuracy_score(Y_test,predictions)
# score














import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.externals import joblib
from sklearn import tree

weatherdata = pd.read_csv('myweather.csv')

X = weatherdata.drop(columns=['winter ','summer'])
Y = weatherdata['winter ']
# X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)



model = DecisionTreeClassifier()
model.fit(X,Y)

tree.export_graphviz(model, out_file='winter-recommender.dot',
                    feature_names=['humidity','tempreature','pressure','summer','rain'],
                    class_names=sorted(str(Y.unique())),
                    label='all',
                    rounded=True,
                    filled=True)
                     

# joblib.load('weather1.joblib')


# predictions = model.predict(X_test)

# score = accuracy_score(Y_test,predictions)
# score
